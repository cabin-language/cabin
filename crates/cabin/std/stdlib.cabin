let This = group {};
let Object = group {};
let Number = group {}; 
let List = group {};
let Text = group {};

let Optional = either {
	data,
	nothing
};

let Anything = group {
	to_text: action(this: Anything): Text,
};

let Group = group {
	fields: Anything,
};

let Parameter = group {
	name: Text,
	type: Anything
};

let Function = group {
	parameters: Anything,
	return_type: Anything,
	compile_time_parameters: Anything,
	tags: Anything,
	this_object: Anything,
};

let system_side_effects = new Object {};
let no_side_effects = new Object {};
let default = new Object {};

let RuntimeTag = group {
	reason: Text
};

let Either = group {
	variants: List
};

let Boolean = either {
	true,
	false
};

# The tag for a built-in function. Functions that are built into the Cabin compiler 
# and run with native code are marked with this, usually via the `builtin_function<>` function.
let BuiltinTag = group {
	internal_name: Text
};

let Addable = group<Operand: Anything, Result: Anything> {
	#[no_side_effects]
	plus: action(this: This, other: Operand): Result
}; 

#[default]
let AddNumbers = extensionof Number tobe Addable { 
	#[public] 
	plus = action(this: Number, other: Number): Number,
};

let Attempted = either {
	data,
	error
};

let system = new Object {

	terminal = new Object {

		#[system_side_effects, new BuiltinTag { internal_name = "terminal.print" }]
		print = action(object: Text): Optional.nothing,

		#[system_side_effects, new BuiltinTag { internal_name = "terminal.input" }] 
		input = action(): Text,

	},
};

let Equalable = group {
	equals: action(this: This, other: This): Boolean
};

let Ordering = either {
	less,
	greater,
	equal
};

let Compareable = group {

	# Compares this value with the given value, returning the ordering of *this* value.
	compared_to: action(this: This, other: This): Ordering
};

#[default]
let CompareablesAreEqualable = extensionof Compareable tobe Equalable {
	equals = action(this: This, other: This): Boolean {
		return is this.compared_to(other) == Ordering.equal;
	}
};
